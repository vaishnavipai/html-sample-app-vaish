pipeline {
    agent any
    environment {
        SONAR_HOME = 'C:\\Users\\Administrator\\Documents\\tools\\sonar-scanner\\bin'
        REPO_NAME  = 'https://github.com/vaishnavipai/html-sample-app-vaish.git'
        BRANCH_NAME = 'master'
        SONAR_TOKEN  = credentials('VAISH-SONAR-TOKEN')
        DOCKER_CREDS = 'VAISH-DOCKER-ID'
        SONAR_SERVER_NAME = 'sonarqube-Vaishnavi-demo' //NAME IN JENKINS GLOBAL CONFIG SETTINGS
        SONAR_PROJECT_KEY = 'Vaish-day3'
        IMAGE_NAME = "paivm123/hello-world"
        IMAGE_TAG =  "vaishimgv1"
        TRIVY_REPORT = "trivy-vaish-report.txt"
    }

    stages {
        //this is stage 1
        stage('Hello') {
            steps {
                //stage close to verify scanner
                echo 'Hello World'
                echo 'version checking'
                //bat or pwsh
                bat """sonar-scanner --version
                echo == checking docker ==>
                docker version
                echo ==> java version ==>
                java --version
                """
            
            }
        }
        //git checkout 
        stage('taking code to github repo') {
            steps {
                echo 'clone a repo to project'
                git url: "${REPO_NAME}", branch: "${BRANCH_NAME}"
                
            }
        }
        //doing sast with snoar-qube
    //     stage('SAST with sonar-scanner') {
    //         steps {
    //             echo 'wait for sonar scan to finish'
    //             script {
    //                 withSonarQubeEnv("${SONAR_SERVER_NAME}"){
                        
    //                 bat """
    //                     sonar-scanner \
    //                 -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
    //                 -Dsonar.sources=. \
    //                 -Dsonar.host.url=${SONAR_HOST_URL} \
    //                 -Dsonar.token=${SONAR_TOKEN}
    //                 """  
    //         }
    //     }
    // }        
    // }
    // using docker plugins
    // stage ('building docker image')
    // {
    //     steps {
    //     echo 'starting docker process'
    //     //to user docker plugin using script
    //     script {
    //         def imageName = "docker.io/paivm123/"
    //         def imageTag = "codev1"
    //         docker.build("${imageName}:${imageTag}",".")
    //     }
    //     //verify images
    //     bat 'docker images | findstr ashuwebapp'
    //     }  
    // }
    // add stage to scan using trivy is no HIGH, CRITICAL vuln then proceed aelse stop pipeline
    stage ('post build security check using trivy') {
        steps {
            echo 'doing scan' 
            bat """
            trivy image --severity HIGH, CRITICAL --format table -o ${TRIVY_REPORT} ${IMAGE_NAME} ${IMAGE_TAG}

            """
        }
    }
    //pushing image to dockerhub
    stage ('docker image push') {
    steps {
        script {
        // def imageName = "paivm123/hello-world"
        // def imageTag = "vaishimgv1"
        def hubCred   = "${DOCKER_CREDS}"
        // calling jenkins pluing docker pipeline to push
        docker.withRegistry('https://registry.hub.docker.com',hubCred){
        docker.image("${IMAGE_NAME}" + ":" + "${IMAGE_TAG}").push()
        
        }
        }
    }
    }

    //deploy app as container using IIS docker image
    stage('deploy app using container image') {
        steps {
            echo 'deploying app using container'
            bat """
            echo trying to remove container with same name 
            docker rm vaishapp1 -f  >null 2>&1 || echo COntainer found found 
            docker run -itd --name vaishapp1 -p 1234:80 ${IMAGE_NAME}:${IMAGE_TAG}
            docker  ps | findstr vaishapp1
            """
        }
    }

    }
}

